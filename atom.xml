<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>willardteriberka</title>
  
  
  <link href="https://willardteriberka.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://willardteriberka.gitee.io/"/>
  <updated>2020-10-02T07:46:51.726Z</updated>
  <id>https://willardteriberka.gitee.io/</id>
  
  <author>
    <name>willardTeriberka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>源码分析-equals方法</title>
    <link href="https://willardteriberka.gitee.io/2020/10/02/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-equals/"/>
    <id>https://willardteriberka.gitee.io/2020/10/02/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-equals/</id>
    <published>2020-10-02T04:54:59.774Z</published>
    <updated>2020-10-02T07:46:51.726Z</updated>
    
    <content type="html"><![CDATA[<p>从对象、object、String分析equals方法。</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>在String中，我们用equals来比较两个字符串中的内容是否相等，但是那个是String重写了Object的equals方法，equals方法最原本的作用是比较被比较对象是否和当前对象的地址一致。下面看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果是我们写了一个Bean对象，new了两个对象，两个对象的地址肯定是不一致的，每次new都会在堆内存中划分一块区域给当前对象，new了两次说明划分了两块，那这个时候只对比地址很明显是不合理的，我们要对比两个对象里面的内容是否相等，那就需要重写equals方法从地址、对象类型、属性内容。</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="string">&quot;12&quot;</span>,<span class="number">12</span>,<span class="string">&quot;HD&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student(<span class="string">&quot;12&quot;</span>,<span class="number">12</span>,<span class="string">&quot;HD&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    System.out.println(student == student1); <span class="comment">//地址不同</span></span><br><span class="line">    System.out.println(student.equals(student1));<span class="comment">//对象的内容相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="Student类的equals方法"><a href="#Student类的equals方法" class="headerlink" title="Student类的equals方法"></a>Student类的equals方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//是否等于本类</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//被比较对象里面有没有地址/本类对象是否和被对比对象类型一致？</span></span><br><span class="line">    Student student = (Student) o;</span><br><span class="line">    <span class="comment">//强转对象为当前对象类型，因为前面判断过是否为同一个类的，所以不会报错</span></span><br><span class="line">    <span class="keyword">return</span> age == student.age &amp;&amp;<span class="comment">//基本类型使用==判断</span></span><br><span class="line">        id == student.id &amp;&amp;<span class="comment">//基本类型使用==判断</span></span><br><span class="line">        Objects.equals(name, student.name) &amp;&amp;</span><br><span class="line">        <span class="comment">//引用类型使用Objects类的equals方法判断</span></span><br><span class="line">        Objects.equals(address, student.address);</span><br><span class="line">   <span class="comment">//引用类型使用Objects类的equals方法判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出在对象地址不一致之后，被对比对象会被转换成Student(前面判断过类不会转换异常：getclass方法)，然后对于对象里的基本类型的属性使用==比较，非基本类型的属性使用Objects.equals方法比较。</p><h4 id="Objects源码"><a href="#Objects源码" class="headerlink" title="Objects源码"></a>Objects源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法原理说明：</p><p>①判断a对象和b对象的地址是否一样如果一样返回true，如果为false继续判断后面布尔条件。</p><p>②再判断a对象是否不为空，且调用Objects的equals方法。（本案例的Object是String类型，所以会调用String的equals方法）</p><p>接入前面的bean对象说明：String类型的name和被比较对象的name属性比较地址，如果为false，则继续判断a是不是空的同时调用Object的equals方法。</p><h4 id="String源码"><a href="#String源码" class="headerlink" title="String源码"></a>String源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这里有个前提，在equals中有个value属性，这个属性是个final修饰的char类型的数组，会在String对象初始化的时候赋值，把当前String对象的内容放入char数组中。</strong></p><p>方法原理：</p><p>①把被比较对象与当前对象比较地址。</p><p>②判断被比较对象是不是String对象。</p><p>③把被比较对象的长度和当前对象的长度作比较看是否一致，不一致返回false。</p><p>④如果一致把当前字符串放入v1char数组，同时把被比较对象的字符串放入v2数组，逐一比较，其中某一位不一致就返回flase。</p><p>​    </p><p><img src="/img/image-20200907105058583.png"></p><p>拿address属性举例，两个都是hd，String源码阶段会产生像上图的value数组初始化。然后本类的address是’H’,’D’,被比较的Student1.address也是’H’,’D’,逐一对比都是一致的，所以返回true。</p><p>总的来说：</p><p>Student中的equals方法执行流程：Student –&gt; Objects –&gt; String</p><p>基本类型会在Student类中对比较完毕，引用类型则通过调用String的equals方法进行数组内容比较。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从对象、object、String分析equals方法。&lt;/p&gt;
&lt;h3 id=&quot;equals方法&quot;&gt;&lt;a href=&quot;#equals方法&quot; class=&quot;headerlink&quot; title=&quot;equals方法&quot;&gt;&lt;/a&gt;equals方法&lt;/h3&gt;&lt;p&gt;在String中，我</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://willardteriberka.gitee.io/2020/10/01/hello-world/"/>
    <id>https://willardteriberka.gitee.io/2020/10/01/hello-world/</id>
    <published>2020-10-01T14:23:14.143Z</published>
    <updated>2020-10-02T02:07:36.325Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">fristPage</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;fristPage&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a</summary>
      
    
    
    
    
  </entry>
  
</feed>
