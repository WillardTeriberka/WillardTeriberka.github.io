<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>willardteriberka</title>
  
  
  <link href="http://willardteriberka.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://willardteriberka.gitee.io/"/>
  <updated>2020-10-02T02:07:36.325Z</updated>
  <id>http://willardteriberka.gitee.io/</id>
  
  <author>
    <name>willardTeriberka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://willardteriberka.gitee.io/2020/10/07/hello-world/"/>
    <id>http://willardteriberka.gitee.io/2020/10/07/hello-world/</id>
    <published>2020-10-07T00:15:58.733Z</published>
    <updated>2020-10-02T02:07:36.325Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">fristPage</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;fristPage&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java网络编程-NIO之缓冲区</title>
    <link href="http://willardteriberka.gitee.io/2019/04/24/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    <id>http://willardteriberka.gitee.io/2019/04/24/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NIO%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA/</id>
    <published>2019-04-24T07:40:24.000Z</published>
    <updated>2020-12-26T10:58:59.840Z</updated>
    
    <content type="html"><![CDATA[<p>NIO的基础要素是缓冲区、通道、选择器。本篇文章讲述缓冲区的部分。</p><!-- toc --><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><h2 id="NIO概念"><a href="#NIO概念" class="headerlink" title="NIO概念"></a>NIO概念</h2><p>同步和和非同步、阻塞和非阻塞。</p><p>同步阻塞 一直排队，直到处理到数据为止。</p><p>同步非阻塞 如果处理需要排队，则不进行。</p><p>异步非阻塞 不排队有监听，监听到目标条件则调用回调函数。</p><p>在 Java 7 中，NIO 有了进一步的改进，也就是 NIO 2，引入了异步非阻塞 IO 方式，也有很多人叫它 AIO（Asynchronous IO</p><p>NIO由三部分组成：缓冲区(buffer)、通道(channel)、选择器(Selector) 在访问个数特别大的时候才使用的。</p><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>作用: 在NIO中，就是通过 Buffer 来读写数据的。所有的数据都是用Buffer来处理的，它是NIO读写数据的中转池, 通常使用字节数组。</p><h3 id="buffer的种类"><a href="#buffer的种类" class="headerlink" title="buffer的种类"></a>buffer的种类</h3><ul><li>ByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li><li>没有Boolean类型的缓冲区</li></ul><h3 id="缓冲区的种类："><a href="#缓冲区的种类：" class="headerlink" title="缓冲区的种类："></a>缓冲区的种类：</h3><ul><li><p>在堆中创建缓冲区称为：间接缓冲区</p></li><li><p>在系统内存创建缓冲区称为：直接缓冲区</p></li><li><p>间接缓冲区的创建和销毁效率要高于直接缓冲区</p></li><li><p>间接缓冲区的工作效率要低于直接缓冲区</p></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>创建缓冲区<ul><li>static ByteBuffer allocate(int capacity)构造方法 在堆内存中创建一个byte类型的buffer缓冲区，参数为该缓冲区的长度</li><li>static ByteBuffer allocateDirect(int capacity) 构造方法 在系统内存中创建一个byte类型的buffer缓冲区，参数为该缓冲区的长度</li><li>public static ByteBuffer wrap(byte[] array) 通过数组在堆内存创建buffer间接缓冲区</li></ul></li><li>添加数据<ul><li>public ByteBuffer put(byte b)：向当前可用位置添加数据。</li><li>public ByteBuffer put(byte[] byteArray)：向当前可用位置添加一个byte[]数组</li><li>public ByteBuffer put(byte[] byteArray,int offset,int len)：添加一个byte[]数组的一部分到缓冲区的当前可用位置。</li></ul></li><li>容量<ul><li>public final int capacity() : 返回此缓冲区的容量。 </li></ul></li><li>限制<ul><li>public int limit()：获取此缓冲区的限制。</li><li>public Buffer limit(int newLimit)：设置newLimit表示索引为此缓冲区的限制。限制之后只能使用限制索引以前的内容。</li></ul></li><li>位置<ul><li>public int position()：获取当前可写入位置索引。</li><li>public Buffer position(int p)：更改当前可写入位置索引。不能大于limit方法设置的限制索引。设置完之后只有范围是position的位置到limit的位置可用</li></ul></li><li>标记<ul><li>public Buffer mark()：设置此缓冲区的标记为当前的position位置。</li></ul></li><li>操作buffer方法</li><li>public Buffer reset() : 将此缓冲区的position位置重置为以前标记的位置。</li><li>public int remaining()：获取position与limit之间的元素数。</li><li>public boolean isReadOnly()：获取当前缓冲区是否只读。</li><li>public boolean isDirect()：获取当前缓冲区是否为直接缓冲区。</li><li>public Buffer rewind()：重绕此缓冲区。将position位置设置为：0，限制limit不变。丢弃标记。</li><li>public Buffer clear()：还原缓冲区的状态。将position设置为：0将限制limit设置为容量capacity；丢弃标记mark。数据保留。</li><li>public Buffer flip()：缩小limit的范围。将limit设置为当前position位置；将当前position位置设置为0；丢弃mark。数据保留。</li></ul><p>推荐使用字节缓冲区</p><h4 id="创建缓冲区"><a href="#创建缓冲区" class="headerlink" title="创建缓冲区"></a>创建缓冲区</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class="number">10</span>);</span><br><span class="line">ByteBuffer byteBuffer = byteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">byte</span>[] bytes = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">ByteBuffer byteBuffer = byteBuffer.wrap(bytes);</span><br></pre></td></tr></table></figure><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br></pre></td></tr></table></figure><h4 id="容量（capacity）"><a href="#容量（capacity）" class="headerlink" title="容量（capacity）"></a>容量（capacity）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">System.out.println(b1.limit());<span class="comment">//使用limit方法打印当前缓冲区容量。 结果： 10</span></span><br></pre></td></tr></table></figure><p>Buffer的容量(capacity)是指：Buffer所能够包含的元素的最大数量。定义了Buffer后，容量是不可变的。</p><h4 id="限制（limit）"><a href="#限制（limit）" class="headerlink" title="限制（limit）"></a>限制（limit）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;限制前容量: &quot;</span> + b1.limit());<span class="comment">//10</span></span><br><span class="line">b1.limit(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;限制后容量: &quot;</span> + b1.limit());<span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>设置限制后在限制范围外添加数据会报BufferOverflowException异常。</p><h4 id="位置（position）"><a href="#位置（position）" class="headerlink" title="位置（position）"></a>位置（position）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;设置位置前:&quot;</span>+Arrays.toString(b1.array()));</span><br><span class="line">System.out.println(b1.toString());</span><br><span class="line">b1.position(<span class="number">5</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">14</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;设置位置后:&quot;</span>+Arrays.toString(b1.array()));</span><br><span class="line">System.out.println(b1.toString());</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置位置前:[11, 12, 13, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">java.nio.HeapByteBuffer[pos=3 lim=10 cap=10]</span><br><span class="line">设置位置后:[11, 12, 13, 0, 0, 14, 0, 0, 0, 0]</span><br><span class="line">java.nio.HeapByteBuffer[pos=6 lim=10 cap=10]</span><br></pre></td></tr></table></figure><p>通俗的理解位置就是下个元素要插入的位置。</p><h4 id="mark（标记）-amp-reset方法"><a href="#mark（标记）-amp-reset方法" class="headerlink" title="mark（标记）&amp;reset方法"></a>mark（标记）&amp;reset方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.mark();</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;重置前：&quot;</span>+Arrays.toString(b1.array()));</span><br><span class="line">b1.reset();</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">14</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;重置后&quot;</span>+Arrays.toString(b1.array()));</span><br></pre></td></tr></table></figure><p>标记只有配合reset方法才有效果，reset方法会把当前position位置修改到Mark的位置上。</p><p>如果没有mark标记，而直接使用reset方法会报InvalidMarkException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line"><span class="comment">//        b1.mark();</span></span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;重置前：&quot;</span>+Arrays.toString(b1.array()));</span><br><span class="line">b1.reset();</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">14</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;重置后&quot;</span>+Arrays.toString(b1.array()));</span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><h5 id="remaining"><a href="#remaining" class="headerlink" title="remaining()"></a>remaining()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">b1.limit(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;获取position与limit之间的元素数&quot;</span>+b1.remaining());<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>获取position与limit之间的元素数</p><h5 id="isReadOnly"><a href="#isReadOnly" class="headerlink" title="isReadOnly()"></a>isReadOnly()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">System.out.println(b1.isReadOnly());<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>要获得一个只读缓冲区，需要调用asReadOnlyBuffer方法创建，不过在Buffer中他是一个抽象方法。</p><h5 id="isDirect"><a href="#isDirect" class="headerlink" title="isDirect()"></a>isDirect()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">System.out.println(b1.isDirect());<span class="comment">//flase</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class="number">10</span>);</span><br><span class="line">System.out.println(byteBuffer.isDirect());<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="rewind"><a href="#rewind" class="headerlink" title="rewind()"></a>rewind()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;倒带缓冲区前&quot;</span>+b1.position());</span><br><span class="line">b1.rewind();</span><br><span class="line">System.out.println(<span class="string">&quot;倒带缓冲区后&quot;</span>b1.position());</span><br></pre></td></tr></table></figure><p>将position位置设置为：0，限制limit不变。丢弃标记。</p><h5 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">b1.limit(<span class="number">7</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;clear前: &quot;</span>+b1);</span><br><span class="line">System.out.println(Arrays.toString(b1.array()));</span><br><span class="line">b1.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;clear后: &quot;</span>+b1);</span><br><span class="line">System.out.println(Arrays.toString(b1.array()));</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clear前: java.nio.HeapByteBuffer[pos=3 lim=7 cap=10]</span><br><span class="line">[11, 12, 13, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">clear后: java.nio.HeapByteBuffer[pos=0 lim=10 cap=10]</span><br><span class="line">[11, 12, 13, 0, 0, 0, 0, 0, 0, 0]</span><br></pre></td></tr></table></figure><p>还原缓冲区position、limit、mark最初的状态，数据不变。</p><h5 id="flip"><a href="#flip" class="headerlink" title="flip()"></a>flip()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b1 = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">12</span>);</span><br><span class="line">b1.put((<span class="keyword">byte</span>) <span class="number">13</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;翻转前：&quot;</span>+b1);</span><br><span class="line">b1.flip();</span><br><span class="line">System.out.println(<span class="string">&quot;翻转后：&quot;</span>+b1);</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">翻转前：java.nio.HeapByteBuffer[pos=3 lim=10 cap=10]</span><br><span class="line">翻转后：java.nio.HeapByteBuffer[pos=0 lim=3 cap=10]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NIO的基础要素是缓冲区、通道、选择器。本篇文章讲述缓冲区的部分。&lt;/p&gt;
&lt;!-- toc --&gt;

&lt;h1 id=&quot;NIO&quot;&gt;&lt;a href=&quot;#NIO&quot; class=&quot;headerlink&quot; title=&quot;NIO&quot;&gt;&lt;/a&gt;NIO&lt;/h1&gt;&lt;h2 id=&quot;NIO概念&quot;</summary>
      
    
    
    
    <category term="Java网络编程" scheme="http://willardteriberka.gitee.io/categories/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="网络编程" scheme="http://willardteriberka.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>源码分析-equals方法</title>
    <link href="http://willardteriberka.gitee.io/2019/04/24/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-equals/"/>
    <id>http://willardteriberka.gitee.io/2019/04/24/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-equals/</id>
    <published>2019-04-24T07:40:24.000Z</published>
    <updated>2020-10-03T10:46:38.810Z</updated>
    
    <content type="html"><![CDATA[<p>从对象、object、String分析equals方法。</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>在String中，我们用equals来比较两个字符串中的内容是否相等，但是那个是String重写了Object的equals方法，equals方法最原本的作用是比较被比较对象是否和当前对象的地址一致。下面看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果是我们写了一个Bean对象，new了两个对象，两个对象的地址肯定是不一致的，每次new都会在堆内存中划分一块区域给当前对象，new了两次说明划分了两块，那这个时候只对比地址很明显是不合理的，我们要对比两个对象里面的内容是否相等，那就需要重写equals方法从地址、对象类型、属性内容。</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="string">&quot;12&quot;</span>,<span class="number">12</span>,<span class="string">&quot;HD&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    Student student1 = <span class="keyword">new</span> Student(<span class="string">&quot;12&quot;</span>,<span class="number">12</span>,<span class="string">&quot;HD&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    System.out.println(student == student1); <span class="comment">//地址不同</span></span><br><span class="line">    System.out.println(student.equals(student1));<span class="comment">//对象的内容相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="Student类的equals方法"><a href="#Student类的equals方法" class="headerlink" title="Student类的equals方法"></a>Student类的equals方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//是否等于本类</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//被比较对象里面有没有地址/本类对象是否和被对比对象类型一致？</span></span><br><span class="line">    Student student = (Student) o;</span><br><span class="line">    <span class="comment">//强转对象为当前对象类型，因为前面判断过是否为同一个类的，所以不会报错</span></span><br><span class="line">    <span class="keyword">return</span> age == student.age &amp;&amp;<span class="comment">//基本类型使用==判断</span></span><br><span class="line">        id == student.id &amp;&amp;<span class="comment">//基本类型使用==判断</span></span><br><span class="line">        Objects.equals(name, student.name) &amp;&amp;</span><br><span class="line">        <span class="comment">//引用类型使用Objects类的equals方法判断</span></span><br><span class="line">        Objects.equals(address, student.address);</span><br><span class="line">   <span class="comment">//引用类型使用Objects类的equals方法判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出在对象地址不一致之后，被对比对象会被转换成Student(前面判断过类不会转换异常：getclass方法)，然后对于对象里的基本类型的属性使用==比较，非基本类型的属性使用Objects.equals方法比较。</p><h4 id="Objects源码"><a href="#Objects源码" class="headerlink" title="Objects源码"></a>Objects源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法原理说明：</p><p>①判断a对象和b对象的地址是否一样如果一样返回true，如果为false继续判断后面布尔条件。</p><p>②再判断a对象是否不为空，且调用Objects的equals方法。（本案例的Object是String类型，所以会调用String的equals方法）</p><p>接入前面的bean对象说明：String类型的name和被比较对象的name属性比较地址，如果为false，则继续判断a是不是空的同时调用Object的equals方法。</p><h4 id="String源码"><a href="#String源码" class="headerlink" title="String源码"></a>String源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这里有个前提，在equals中有个value属性，这个属性是个final修饰的char类型的数组，会在String对象初始化的时候赋值，把当前String对象的内容放入char数组中。</strong></p><p>方法原理：</p><p>①把被比较对象与当前对象比较地址。</p><p>②判断被比较对象是不是String对象。</p><p>③把被比较对象的长度和当前对象的长度作比较看是否一致，不一致返回false。</p><p>④如果一致把当前字符串放入v1char数组，同时把被比较对象的字符串放入v2数组，逐一比较，其中某一位不一致就返回flase。</p><p>​    </p><p><img src="/img/image-20200907105058583.png"></p><p>拿address属性举例，两个都是hd，String源码阶段会产生像上图的value数组初始化。然后本类的address是’H’,’D’,被比较的Student1.address也是’H’,’D’,逐一对比都是一致的，所以返回true。</p><p>总的来说：</p><p>Student中的equals方法执行流程：Student –&gt; Objects –&gt; String</p><p>基本类型会在Student类中对比较完毕，引用类型则通过调用String的equals方法进行数组内容比较。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从对象、object、String分析equals方法。&lt;/p&gt;
&lt;h3 id=&quot;equals方法&quot;&gt;&lt;a href=&quot;#equals方法&quot; class=&quot;headerlink&quot; title=&quot;equals方法&quot;&gt;&lt;/a&gt;equals方法&lt;/h3&gt;&lt;p&gt;在String中，我</summary>
      
    
    
    
    <category term="源码" scheme="http://willardteriberka.gitee.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="源码" scheme="http://willardteriberka.gitee.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="http://willardteriberka.gitee.io/2019/03/30/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://willardteriberka.gitee.io/2019/03/30/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2019-03-30T13:18:02.000Z</published>
    <updated>2020-12-26T11:07:23.559Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="feca470601c3da662d5acdd3df1f54e45f7303fd4d4093b669b4fd523076f818"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    <category term="Linux" scheme="http://willardteriberka.gitee.io/categories/Linux/"/>
    
    
    <category term="Linux命令" scheme="http://willardteriberka.gitee.io/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
